//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LetsGoBikingClientC_.RoutingServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/LetsGoBikingServer.Models")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoutingServiceReference.IRoutingService")]
    public interface IRoutingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/GetPosition", ReplyAction="http://tempuri.org/IRoutingService/GetPositionResponse")]
        LetsGoBikingClientC_.RoutingServiceReference.Position GetPosition(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/GetPosition", ReplyAction="http://tempuri.org/IRoutingService/GetPositionResponse")]
        System.Threading.Tasks.Task<LetsGoBikingClientC_.RoutingServiceReference.Position> GetPositionAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/CalculateDistance", ReplyAction="http://tempuri.org/IRoutingService/CalculateDistanceResponse")]
        double CalculateDistance(LetsGoBikingClientC_.RoutingServiceReference.Position start, LetsGoBikingClientC_.RoutingServiceReference.Position arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/CalculateDistance", ReplyAction="http://tempuri.org/IRoutingService/CalculateDistanceResponse")]
        System.Threading.Tasks.Task<double> CalculateDistanceAsync(LetsGoBikingClientC_.RoutingServiceReference.Position start, LetsGoBikingClientC_.RoutingServiceReference.Position arrival);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoutingServiceChannel : LetsGoBikingClientC_.RoutingServiceReference.IRoutingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoutingServiceClient : System.ServiceModel.ClientBase<LetsGoBikingClientC_.RoutingServiceReference.IRoutingService>, LetsGoBikingClientC_.RoutingServiceReference.IRoutingService {
        
        public RoutingServiceClient() {
        }
        
        public RoutingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoutingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LetsGoBikingClientC_.RoutingServiceReference.Position GetPosition(string address) {
            return base.Channel.GetPosition(address);
        }
        
        public System.Threading.Tasks.Task<LetsGoBikingClientC_.RoutingServiceReference.Position> GetPositionAsync(string address) {
            return base.Channel.GetPositionAsync(address);
        }
        
        public double CalculateDistance(LetsGoBikingClientC_.RoutingServiceReference.Position start, LetsGoBikingClientC_.RoutingServiceReference.Position arrival) {
            return base.Channel.CalculateDistance(start, arrival);
        }
        
        public System.Threading.Tasks.Task<double> CalculateDistanceAsync(LetsGoBikingClientC_.RoutingServiceReference.Position start, LetsGoBikingClientC_.RoutingServiceReference.Position arrival) {
            return base.Channel.CalculateDistanceAsync(start, arrival);
        }
    }
}
